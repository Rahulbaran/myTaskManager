{"version":3,"sources":["home.js"],"names":["homeSections","document","querySelectorAll","options","rootMargin","threshold","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","intersectionRatio","sectionImg","target","querySelector","sectionTxt","style","transform","opacity","section","observe","noteForm","titleField","contentField","noteCards","createNote","note","Promise","resolve","reject","xhr","XMLHttpRequest","responseType","timeout","open","setRequestHeader","send","JSON","stringify","onload","status","response","ontimeout","timeError","onerror","err","addNote","then","data","noteHtml","id","note_date","title","content","insertAdjacentHTML","catch","console","error","addEventListener","e","preventDefault","value","trim","length"],"mappings":"AAAA,aAGA,MAAMA,aAAeC,SAASC,iBAAiB,6BAEzCC,QAAU,CACdC,WAAY,MACZC,UAAW,KAGPC,SAAW,IAAIC,sBAAqBC,IACxCA,EAAQC,SAAQC,IACd,GAAIA,EAAMC,gBAAkBD,EAAME,kBAAoB,IAAM,CAC1D,MAAMC,EAAaH,EAAMI,OAAOC,cAAc,8BACxCC,EAAaN,EAAMI,OAAOC,cAAc,6BAC9CF,EAAWI,MAAMC,UAAY,gBAC7BL,EAAWI,MAAME,QAAU,EAC3BH,EAAWC,MAAMC,UAAY,gBAC7BF,EAAWC,MAAME,QAAU,QAG9BhB,SAEHH,aAAaS,SAAQW,IACnBd,SAASe,QAAQD,MAInB,MAAME,SAAWrB,SAASc,cAAc,oCAClCQ,WAAatB,SAASc,cAAc,eACpCS,aAAevB,SAASc,cAAc,iBACtCU,UAAYxB,SAASc,cAAc,iBAGnCW,WAAaC,GACD,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAM,IAAIC,eAEhBD,EAAIE,aAAe,OACnBF,EAAIG,QAAU,IACdH,EAAII,KAAK,OAAQ,SAAS,GAC1BJ,EAAIK,iBAAiB,eAAgB,oBACrCL,EAAIM,KAAKC,KAAKC,UAAUZ,IAExBI,EAAIS,OAAS,KACI,MAAfT,EAAIU,OAAiBZ,EAAQE,EAAIW,UAAYZ,EAAOC,EAAIW,WAG1DX,EAAIY,UAAYC,GAAad,EAAOc,GACpCb,EAAIc,QAAUC,GAAOhB,EAAOgB,MAO1BC,QAAU,SAAUpB,GACxBD,WAAWC,GACRqB,MAAKC,IACJ,MAAMC,EAAW,2CAA2CD,EAAKE,qCAAqCF,EAAKG,gKAExEH,EAAKI,4CAA4CJ,EAAKK,0BACzF7B,UAAU8B,mBAAmB,aAAcL,MAE5CM,OAAMV,GAAOW,QAAQC,MAAMZ,MAIhCxB,SAASqC,iBAAiB,UAAU,SAAUC,GAC5CA,EAAEC,iBAEF,MAAOR,EAAOC,GAAW,CAAC/B,WAAWuC,MAAMC,OAAQvC,aAAasC,MAAMC,QAClEV,EAAMW,OAAS,IACjBzC,WAAWuC,MAAQ,GACnBtC,aAAasC,MAAQ,GAjBvBpC,WAkBU,CAAE2B,MAAAA,EAAOC,QAAAA,IAjBhBN,MAAKC,IACJ,MAAMC,EAAW,2CAA2CD,EAAKE,qCAAqCF,EAAKG,gKAExEH,EAAKI,4CAA4CJ,EAAKK,0BACzF7B,UAAU8B,mBAAmB,aAAcL,MAE5CM,OAAMV,GAAOW,QAAQC,MAAMZ","file":"home.js","sourcesContent":["\"use strict\";\n\n// *--------------------- SLIDING FUNCTIONALITY USING INTERSECTION OBSERVER API ---------------------* //\nconst homeSections = document.querySelectorAll(\".container--home--section\");\n\nconst options = {\n  rootMargin: \"0px\",\n  threshold: 0.15,\n};\n\nconst observer = new IntersectionObserver(entries => {\n  entries.forEach(entry => {\n    if (entry.isIntersecting && entry.intersectionRatio > 0.15) {\n      const sectionImg = entry.target.querySelector(\".container__image--wrapper\");\n      const sectionTxt = entry.target.querySelector(\".container__text--wrapper\");\n      sectionImg.style.transform = \"translateX(0)\";\n      sectionImg.style.opacity = 1;\n      sectionTxt.style.transform = \"translateX(0)\";\n      sectionTxt.style.opacity = 1;\n    }\n  });\n}, options);\n\nhomeSections.forEach(section => {\n  observer.observe(section);\n});\n\n// *-------------------------- FUNCTIONALITY TO CREATE NEW NOTES ---------------------------* //\nconst noteForm = document.querySelector(\".new--note--form--container form\");\nconst titleField = document.querySelector(\"form #title\");\nconst contentField = document.querySelector(\"form textarea\");\nconst noteCards = document.querySelector(\".notes__cards\");\n\n// Function to send note data\nconst createNote = note => {\n  const promise = new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.responseType = \"json\";\n    xhr.timeout = 3000;\n    xhr.open(\"post\", \"/home\", true);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    xhr.send(JSON.stringify(note));\n\n    xhr.onload = () => {\n      xhr.status === 200 ? resolve(xhr.response) : reject(xhr.response);\n    };\n\n    xhr.ontimeout = timeError => reject(timeError);\n    xhr.onerror = err => reject(err);\n  });\n\n  return promise;\n};\n\n// Function to add note in UI\nconst addNote = function (note) {\n  createNote(note)\n    .then(data => {\n      const noteHtml = `<div class=\"note__card\" id=\"note__card--${data.id}\"><div><span class=\"note__date\">${data.note_date}\n          </span><button class=\"note__delete--btn\"><ion-icon name=\"trash\"></ion-icon></button></div><div>\n         <h3 class=\"note__card--title\">${data.title}</h3><p class=\"note__card--content\">${data.content}</p></div></div>`;\n      noteCards.insertAdjacentHTML(\"afterbegin\", noteHtml);\n    })\n    .catch(err => console.error(err));\n};\n\n// Event Handler for Note Form Submission\nnoteForm.addEventListener(\"submit\", function (e) {\n  e.preventDefault();\n\n  const [title, content] = [titleField.value.trim(), contentField.value.trim()];\n  if (title.length > 0) {\n    titleField.value = \"\";\n    contentField.value = \"\";\n    addNote({ title, content });\n  }\n});\n\n// *------------------- Functionality to Delete notes --------------------*\n"]}